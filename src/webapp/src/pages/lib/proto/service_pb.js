// source: service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.sample.IssuerStats', null, global);
goog.exportSymbol('proto.sample.IssuerStatsRequest', null, global);
goog.exportSymbol('proto.sample.IssuerStatsRequest.PrbuiltGraph', null, global);
goog.exportSymbol('proto.sample.IssuerStatsResponse', null, global);
goog.exportSymbol('proto.sample.MatchIssuersRequest', null, global);
goog.exportSymbol('proto.sample.MatchIssuersResponse', null, global);
goog.exportSymbol('proto.sample.MatchIssuersResponse.CusipCandidate', null, global);
goog.exportSymbol('proto.sample.OwnershipByInstruments', null, global);
goog.exportSymbol('proto.sample.PerInstrumentOwnershipHistory', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.MatchIssuersRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sample.MatchIssuersRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.MatchIssuersRequest.displayName = 'proto.sample.MatchIssuersRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.MatchIssuersResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sample.MatchIssuersResponse.repeatedFields_, null);
};
goog.inherits(proto.sample.MatchIssuersResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.MatchIssuersResponse.displayName = 'proto.sample.MatchIssuersResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.MatchIssuersResponse.CusipCandidate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sample.MatchIssuersResponse.CusipCandidate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.MatchIssuersResponse.CusipCandidate.displayName = 'proto.sample.MatchIssuersResponse.CusipCandidate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.IssuerStatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sample.IssuerStatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.IssuerStatsRequest.displayName = 'proto.sample.IssuerStatsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.IssuerStatsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sample.IssuerStatsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.IssuerStatsResponse.displayName = 'proto.sample.IssuerStatsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.IssuerStats = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sample.IssuerStats.repeatedFields_, null);
};
goog.inherits(proto.sample.IssuerStats, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.IssuerStats.displayName = 'proto.sample.IssuerStats';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.OwnershipByInstruments = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sample.OwnershipByInstruments, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.OwnershipByInstruments.displayName = 'proto.sample.OwnershipByInstruments';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sample.PerInstrumentOwnershipHistory = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sample.PerInstrumentOwnershipHistory, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sample.PerInstrumentOwnershipHistory.displayName = 'proto.sample.PerInstrumentOwnershipHistory';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.MatchIssuersRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.MatchIssuersRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.MatchIssuersRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.MatchIssuersRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    textToMatch: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.MatchIssuersRequest}
 */
proto.sample.MatchIssuersRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.MatchIssuersRequest;
  return proto.sample.MatchIssuersRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.MatchIssuersRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.MatchIssuersRequest}
 */
proto.sample.MatchIssuersRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextToMatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.MatchIssuersRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.MatchIssuersRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.MatchIssuersRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.MatchIssuersRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextToMatch();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string text_to_match = 1;
 * @return {string}
 */
proto.sample.MatchIssuersRequest.prototype.getTextToMatch = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.MatchIssuersRequest} returns this
 */
proto.sample.MatchIssuersRequest.prototype.setTextToMatch = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sample.MatchIssuersResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.MatchIssuersResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.MatchIssuersResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.MatchIssuersResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.MatchIssuersResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cusipCandidateList: jspb.Message.toObjectList(msg.getCusipCandidateList(),
    proto.sample.MatchIssuersResponse.CusipCandidate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.MatchIssuersResponse}
 */
proto.sample.MatchIssuersResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.MatchIssuersResponse;
  return proto.sample.MatchIssuersResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.MatchIssuersResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.MatchIssuersResponse}
 */
proto.sample.MatchIssuersResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sample.MatchIssuersResponse.CusipCandidate;
      reader.readMessage(value,proto.sample.MatchIssuersResponse.CusipCandidate.deserializeBinaryFromReader);
      msg.addCusipCandidate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.MatchIssuersResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.MatchIssuersResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.MatchIssuersResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.MatchIssuersResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCusipCandidateList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sample.MatchIssuersResponse.CusipCandidate.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.MatchIssuersResponse.CusipCandidate.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.MatchIssuersResponse.CusipCandidate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.MatchIssuersResponse.CusipCandidate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.MatchIssuersResponse.CusipCandidate.toObject = function(includeInstance, msg) {
  var f, obj = {
    cusip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.MatchIssuersResponse.CusipCandidate}
 */
proto.sample.MatchIssuersResponse.CusipCandidate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.MatchIssuersResponse.CusipCandidate;
  return proto.sample.MatchIssuersResponse.CusipCandidate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.MatchIssuersResponse.CusipCandidate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.MatchIssuersResponse.CusipCandidate}
 */
proto.sample.MatchIssuersResponse.CusipCandidate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCusip(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.MatchIssuersResponse.CusipCandidate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.MatchIssuersResponse.CusipCandidate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.MatchIssuersResponse.CusipCandidate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.MatchIssuersResponse.CusipCandidate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCusip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cusip = 1;
 * @return {string}
 */
proto.sample.MatchIssuersResponse.CusipCandidate.prototype.getCusip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.MatchIssuersResponse.CusipCandidate} returns this
 */
proto.sample.MatchIssuersResponse.CusipCandidate.prototype.setCusip = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.sample.MatchIssuersResponse.CusipCandidate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.MatchIssuersResponse.CusipCandidate} returns this
 */
proto.sample.MatchIssuersResponse.CusipCandidate.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated CusipCandidate cusip_candidate = 1;
 * @return {!Array<!proto.sample.MatchIssuersResponse.CusipCandidate>}
 */
proto.sample.MatchIssuersResponse.prototype.getCusipCandidateList = function() {
  return /** @type{!Array<!proto.sample.MatchIssuersResponse.CusipCandidate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sample.MatchIssuersResponse.CusipCandidate, 1));
};


/**
 * @param {!Array<!proto.sample.MatchIssuersResponse.CusipCandidate>} value
 * @return {!proto.sample.MatchIssuersResponse} returns this
*/
proto.sample.MatchIssuersResponse.prototype.setCusipCandidateList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sample.MatchIssuersResponse.CusipCandidate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sample.MatchIssuersResponse.CusipCandidate}
 */
proto.sample.MatchIssuersResponse.prototype.addCusipCandidate = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sample.MatchIssuersResponse.CusipCandidate, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sample.MatchIssuersResponse} returns this
 */
proto.sample.MatchIssuersResponse.prototype.clearCusipCandidateList = function() {
  return this.setCusipCandidateList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.IssuerStatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.IssuerStatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.IssuerStatsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.IssuerStatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cusip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    prebuiltGraph: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.IssuerStatsRequest}
 */
proto.sample.IssuerStatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.IssuerStatsRequest;
  return proto.sample.IssuerStatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.IssuerStatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.IssuerStatsRequest}
 */
proto.sample.IssuerStatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCusip(value);
      break;
    case 2:
      var value = /** @type {!proto.sample.IssuerStatsRequest.PrbuiltGraph} */ (reader.readEnum());
      msg.setPrebuiltGraph(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.IssuerStatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.IssuerStatsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.IssuerStatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.IssuerStatsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCusip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrebuiltGraph();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.sample.IssuerStatsRequest.PrbuiltGraph = {
  UNDEFINED: 0,
  PULL_ALL_STATS: 1
};

/**
 * optional string cusip = 1;
 * @return {string}
 */
proto.sample.IssuerStatsRequest.prototype.getCusip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.IssuerStatsRequest} returns this
 */
proto.sample.IssuerStatsRequest.prototype.setCusip = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PrbuiltGraph prebuilt_graph = 2;
 * @return {!proto.sample.IssuerStatsRequest.PrbuiltGraph}
 */
proto.sample.IssuerStatsRequest.prototype.getPrebuiltGraph = function() {
  return /** @type {!proto.sample.IssuerStatsRequest.PrbuiltGraph} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.sample.IssuerStatsRequest.PrbuiltGraph} value
 * @return {!proto.sample.IssuerStatsRequest} returns this
 */
proto.sample.IssuerStatsRequest.prototype.setPrebuiltGraph = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.IssuerStatsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.IssuerStatsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.IssuerStatsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.IssuerStatsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cusip: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    lastUpdateTimestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    issuerStats: (f = msg.getIssuerStats()) && proto.sample.IssuerStats.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.IssuerStatsResponse}
 */
proto.sample.IssuerStatsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.IssuerStatsResponse;
  return proto.sample.IssuerStatsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.IssuerStatsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.IssuerStatsResponse}
 */
proto.sample.IssuerStatsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCusip(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastUpdateTimestamp(value);
      break;
    case 3:
      var value = new proto.sample.IssuerStats;
      reader.readMessage(value,proto.sample.IssuerStats.deserializeBinaryFromReader);
      msg.setIssuerStats(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.IssuerStatsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.IssuerStatsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.IssuerStatsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.IssuerStatsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCusip();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getLastUpdateTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getIssuerStats();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.sample.IssuerStats.serializeBinaryToWriter
    );
  }
};


/**
 * optional string cusip = 1;
 * @return {string}
 */
proto.sample.IssuerStatsResponse.prototype.getCusip = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.IssuerStatsResponse} returns this
 */
proto.sample.IssuerStatsResponse.prototype.setCusip = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.sample.IssuerStatsResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.IssuerStatsResponse} returns this
 */
proto.sample.IssuerStatsResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 last_update_timestamp = 2;
 * @return {number}
 */
proto.sample.IssuerStatsResponse.prototype.getLastUpdateTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sample.IssuerStatsResponse} returns this
 */
proto.sample.IssuerStatsResponse.prototype.setLastUpdateTimestamp = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional IssuerStats issuer_stats = 3;
 * @return {?proto.sample.IssuerStats}
 */
proto.sample.IssuerStatsResponse.prototype.getIssuerStats = function() {
  return /** @type{?proto.sample.IssuerStats} */ (
    jspb.Message.getWrapperField(this, proto.sample.IssuerStats, 3));
};


/**
 * @param {?proto.sample.IssuerStats|undefined} value
 * @return {!proto.sample.IssuerStatsResponse} returns this
*/
proto.sample.IssuerStatsResponse.prototype.setIssuerStats = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sample.IssuerStatsResponse} returns this
 */
proto.sample.IssuerStatsResponse.prototype.clearIssuerStats = function() {
  return this.setIssuerStats(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sample.IssuerStatsResponse.prototype.hasIssuerStats = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sample.IssuerStats.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.IssuerStats.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.IssuerStats.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.IssuerStats} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.IssuerStats.toObject = function(includeInstance, msg) {
  var f, obj = {
    ownerListsList: jspb.Message.toObjectList(msg.getOwnerListsList(),
    proto.sample.OwnershipByInstruments.toObject, includeInstance),
    ownerHistoryList: jspb.Message.toObjectList(msg.getOwnerHistoryList(),
    proto.sample.PerInstrumentOwnershipHistory.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.IssuerStats}
 */
proto.sample.IssuerStats.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.IssuerStats;
  return proto.sample.IssuerStats.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.IssuerStats} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.IssuerStats}
 */
proto.sample.IssuerStats.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sample.OwnershipByInstruments;
      reader.readMessage(value,proto.sample.OwnershipByInstruments.deserializeBinaryFromReader);
      msg.addOwnerLists(value);
      break;
    case 2:
      var value = new proto.sample.PerInstrumentOwnershipHistory;
      reader.readMessage(value,proto.sample.PerInstrumentOwnershipHistory.deserializeBinaryFromReader);
      msg.addOwnerHistory(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.IssuerStats.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.IssuerStats.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.IssuerStats} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.IssuerStats.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOwnerListsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sample.OwnershipByInstruments.serializeBinaryToWriter
    );
  }
  f = message.getOwnerHistoryList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sample.PerInstrumentOwnershipHistory.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OwnershipByInstruments owner_lists = 1;
 * @return {!Array<!proto.sample.OwnershipByInstruments>}
 */
proto.sample.IssuerStats.prototype.getOwnerListsList = function() {
  return /** @type{!Array<!proto.sample.OwnershipByInstruments>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sample.OwnershipByInstruments, 1));
};


/**
 * @param {!Array<!proto.sample.OwnershipByInstruments>} value
 * @return {!proto.sample.IssuerStats} returns this
*/
proto.sample.IssuerStats.prototype.setOwnerListsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sample.OwnershipByInstruments=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sample.OwnershipByInstruments}
 */
proto.sample.IssuerStats.prototype.addOwnerLists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sample.OwnershipByInstruments, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sample.IssuerStats} returns this
 */
proto.sample.IssuerStats.prototype.clearOwnerListsList = function() {
  return this.setOwnerListsList([]);
};


/**
 * repeated PerInstrumentOwnershipHistory owner_history = 2;
 * @return {!Array<!proto.sample.PerInstrumentOwnershipHistory>}
 */
proto.sample.IssuerStats.prototype.getOwnerHistoryList = function() {
  return /** @type{!Array<!proto.sample.PerInstrumentOwnershipHistory>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sample.PerInstrumentOwnershipHistory, 2));
};


/**
 * @param {!Array<!proto.sample.PerInstrumentOwnershipHistory>} value
 * @return {!proto.sample.IssuerStats} returns this
*/
proto.sample.IssuerStats.prototype.setOwnerHistoryList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sample.PerInstrumentOwnershipHistory=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sample.PerInstrumentOwnershipHistory}
 */
proto.sample.IssuerStats.prototype.addOwnerHistory = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sample.PerInstrumentOwnershipHistory, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sample.IssuerStats} returns this
 */
proto.sample.IssuerStats.prototype.clearOwnerHistoryList = function() {
  return this.setOwnerHistoryList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.OwnershipByInstruments.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.OwnershipByInstruments.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.OwnershipByInstruments} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.OwnershipByInstruments.toObject = function(includeInstance, msg) {
  var f, obj = {
    cik: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    shrsPrnAmt: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: jspb.Message.getFieldWithDefault(msg, 3, 0),
    ownPct: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.OwnershipByInstruments}
 */
proto.sample.OwnershipByInstruments.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.OwnershipByInstruments;
  return proto.sample.OwnershipByInstruments.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.OwnershipByInstruments} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.OwnershipByInstruments}
 */
proto.sample.OwnershipByInstruments.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCik(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShrsPrnAmt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setOwnPct(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.OwnershipByInstruments.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.OwnershipByInstruments.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.OwnershipByInstruments} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.OwnershipByInstruments.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCik();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getShrsPrnAmt();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getOwnPct();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
};


/**
 * optional string cik = 1;
 * @return {string}
 */
proto.sample.OwnershipByInstruments.prototype.getCik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.OwnershipByInstruments} returns this
 */
proto.sample.OwnershipByInstruments.prototype.setCik = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.sample.OwnershipByInstruments.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.OwnershipByInstruments} returns this
 */
proto.sample.OwnershipByInstruments.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional int64 shrs_prn_amt = 2;
 * @return {number}
 */
proto.sample.OwnershipByInstruments.prototype.getShrsPrnAmt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.sample.OwnershipByInstruments} returns this
 */
proto.sample.OwnershipByInstruments.prototype.setShrsPrnAmt = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 value = 3;
 * @return {number}
 */
proto.sample.OwnershipByInstruments.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.sample.OwnershipByInstruments} returns this
 */
proto.sample.OwnershipByInstruments.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional double own_pct = 12;
 * @return {number}
 */
proto.sample.OwnershipByInstruments.prototype.getOwnPct = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.sample.OwnershipByInstruments} returns this
 */
proto.sample.OwnershipByInstruments.prototype.setOwnPct = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.toObject = function(opt_includeInstance) {
  return proto.sample.PerInstrumentOwnershipHistory.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sample.PerInstrumentOwnershipHistory} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.PerInstrumentOwnershipHistory.toObject = function(includeInstance, msg) {
  var f, obj = {
    cik: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 10, ""),
    dateFiled: jspb.Message.getFieldWithDefault(msg, 2, ""),
    directoryUrl: jspb.Message.getFieldWithDefault(msg, 3, ""),
    shrsPrnAmt: jspb.Message.getFieldWithDefault(msg, 4, 0),
    value: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sample.PerInstrumentOwnershipHistory}
 */
proto.sample.PerInstrumentOwnershipHistory.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sample.PerInstrumentOwnershipHistory;
  return proto.sample.PerInstrumentOwnershipHistory.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sample.PerInstrumentOwnershipHistory} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sample.PerInstrumentOwnershipHistory}
 */
proto.sample.PerInstrumentOwnershipHistory.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCik(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDateFiled(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDirectoryUrl(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShrsPrnAmt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sample.PerInstrumentOwnershipHistory.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sample.PerInstrumentOwnershipHistory} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sample.PerInstrumentOwnershipHistory.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCik();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getDateFiled();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDirectoryUrl();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getShrsPrnAmt();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getValue();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string cik = 1;
 * @return {string}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.getCik = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.PerInstrumentOwnershipHistory} returns this
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.setCik = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 10;
 * @return {string}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.PerInstrumentOwnershipHistory} returns this
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string date_filed = 2;
 * @return {string}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.getDateFiled = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.PerInstrumentOwnershipHistory} returns this
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.setDateFiled = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string directory_url = 3;
 * @return {string}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.getDirectoryUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sample.PerInstrumentOwnershipHistory} returns this
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.setDirectoryUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 shrs_prn_amt = 4;
 * @return {number}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.getShrsPrnAmt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.sample.PerInstrumentOwnershipHistory} returns this
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.setShrsPrnAmt = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 value = 5;
 * @return {number}
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.sample.PerInstrumentOwnershipHistory} returns this
 */
proto.sample.PerInstrumentOwnershipHistory.prototype.setValue = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto.sample);
